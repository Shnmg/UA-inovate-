import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
from datetime import datetime
import csv
import os

class FinancialFlowchartGenerator:
    def __init__(self):
        self.user_data = {
            'income': {},
            'expenses': {},
            'savings': {},
            'debt': {},
            'high_ticket_purchases': []
        }
        self.financial_metrics = {}
        self.recommendations = []

    def collect_user_data(self):
        """Collect financial data from the user through command-line interface"""
        print("\n===== FINANCIAL DATA COLLECTION =====\n")
        
        # Income data
        print("INCOME INFORMATION:")
        self.user_data['income']['monthly'] = self._get_numeric_input("Enter your monthly income: $")
        
        # Expenses data
        print("\nEXPENSE INFORMATION:")
        categories = ['Rent/Mortgage', 'Utilities', 'Food', 'Transportation', 'Entertainment', 'Insurance', 'Other']
        self.user_data['expenses'] = {}
        for category in categories:
            self.user_data['expenses'][category] = self._get_numeric_input(f"Enter your monthly {category} expenses: $")
        
        # Savings data
        print("\nSAVINGS INFORMATION:")
        self.user_data['savings']['current'] = self._get_numeric_input("Enter your current savings amount: $")
        self.user_data['savings']['monthly_contribution'] = self._get_numeric_input("Enter your monthly savings contribution: $")
        
        # Debt data
        print("\nDEBT INFORMATION:")
        debt_types = ['Credit Cards', 'Student Loans', 'Car Loans', 'Personal Loans', 'Other']
        self.user_data['debt'] = {}
        for debt_type in debt_types:
            amount = self._get_numeric_input(f"Enter your {debt_type} debt amount (0 if none): $")
            if amount > 0:
                interest = self._get_numeric_input(f"Enter the interest rate for {debt_type} (%): ")
                self.user_data['debt'][debt_type] = {'amount': amount, 'interest': interest}
        
        # High-ticket purchases
        print("\nHIGH-TICKET PURCHASES:")
        print("Enter information about recent high-ticket purchases (over $500)")
        while True:
            add_purchase = input("Would you like to add a high-ticket purchase? (yes/no): ").lower()
            if add_purchase != 'yes':
                break
            
            item = input("Enter purchase description: ")
            amount = self._get_numeric_input("Enter purchase amount: $")
            date_str = input("Enter purchase date (MM/DD/YYYY): ")
            category = input("Enter purchase category: ")
            
            try:
                date = datetime.strptime(date_str, "%m/%d/%Y").date()
                self.user_data['high_ticket_purchases'].append({
                    'item': item,
                    'amount': amount,
                    'date': date,
                    'category': category
                })
            except ValueError:
                print("Invalid date format. Please try again.")

    def import_from_csv(self, filepath):
        """Import financial data from a CSV file"""
        try:
            with open(filepath, 'r') as file:
                reader = csv.DictReader(file)
                # Process the CSV data based on expected structure
                # This would need to be expanded based on the specific CSV format expected
                print(f"Successfully imported data from {filepath}")
        except Exception as e:
            print(f"Error importing CSV: {e}")

    def analyze_data(self):
        """Analyze the user's financial data and calculate key metrics"""
        # Calculate total monthly expenses
        total_expenses = sum(self.user_data['expenses'].values())
        
        # Calculate total debt
        total_debt = sum(item['amount'] for item in self.user_data['debt'].values())
        
        # Calculate total high-ticket purchases
        high_ticket_total = sum(purchase['amount'] for purchase in self.user_data['high_ticket_purchases'])
        
        # Calculate debt-to-income ratio
        monthly_income = self.user_data['income']['monthly']
        debt_to_income = (total_debt / 12) / monthly_income if monthly_income > 0 else float('inf')
        
        # Calculate savings rate
        savings_rate = self.user_data['savings']['monthly_contribution'] / monthly_income if monthly_income > 0 else 0
        
        # Calculate discretionary income
        discretionary_income = monthly_income - total_expenses
        
        # Store calculated metrics
        self.financial_metrics = {
            'total_expenses': total_expenses,
            'total_debt': total_debt,
            'high_ticket_total': high_ticket_total,
            'debt_to_income': debt_to_income,
            'savings_rate': savings_rate,
            'discretionary_income': discretionary_income
        }
        
        # Analyze high-ticket purchases
        if self.user_data['high_ticket_purchases']:
            by_category = {}
            for purchase in self.user_data['high_ticket_purchases']:
                category = purchase['category']
                if category not in by_category:
                    by_category[category] = []
                by_category[category].append(purchase)
            
            self.financial_metrics['high_ticket_by_category'] = by_category

    def generate_recommendations(self):
        """Generate personalized financial recommendations based on analysis"""
        # Clear previous recommendations
        self.recommendations = []
        
        # Income and expense recommendations
        monthly_income = self.user_data['income']['monthly']
        total_expenses = self.financial_metrics['total_expenses']
        expense_ratio = total_expenses / monthly_income if monthly_income > 0 else float('inf')
        
        if expense_ratio > 0.7:
            self.recommendations.append({
                'category': 'Budgeting',
                'title': 'Reduce monthly expenses',
                'description': 'Your expenses are taking up more than 70% of your income. Consider using the 50/30/20 budgeting rule: 50% for needs, 30% for wants, and 20% for savings and debt repayment.'
            })
        
        # Savings recommendations
        savings_rate = self.financial_metrics['savings_rate']
        if savings_rate < 0.1:
            self.recommendations.append({
                'category': 'Savings',
                'title': 'Increase savings rate',
                'description': 'Your current savings rate is below 10%. Try to build an emergency fund covering 3-6 months of expenses, then focus on long-term savings goals.'
            })
        
        # Debt recommendations
        debt_to_income = self.financial_metrics['debt_to_income']
        if debt_to_income > 0.36:
            self.recommendations.append({
                'category': 'Debt Management',
                'title': 'Reduce debt burden',
                'description': 'Your debt-to-income ratio is high. Consider using the debt snowball method (paying smallest debts first) or debt avalanche method (paying highest interest debts first).'
            })
        
        # High-ticket purchase recommendations
        high_ticket_total = self.financial_metrics['high_ticket_total']
        annual_income = monthly_income * 12
        if high_ticket_total > annual_income * 0.2:
            self.recommendations.append({
                'category': 'Spending Habits',
                'title': 'Review high-ticket purchases',
                'description': 'Your high-ticket purchases represent a significant portion of your annual income. Consider implementing a 30-day waiting period before major purchases to reduce impulse buying.'
            })
        
        # General financial literacy recommendations
        self.recommendations.append({
            'category': 'Financial Education',
            'title': 'Continue financial education',
            'description': 'Explore resources like the Consumer Financial Protection Bureau (consumerfinance.gov) for free financial education materials.'
        })

    def generate_flowchart(self, output_file="financial_flowchart.png"):
        """Generate a visual flowchart representing the user's financial situation"""
        G = nx.DiGraph()
        
        # Add main income node
        G.add_node("Income", shape="rectangle", color="green")
        
        # Add expense categories
        total_expenses = self.financial_metrics['total_expenses']
        expense_nodes = []
        for category, amount in self.user_data['expenses'].items():
            node_name = f"{category}\n${amount}"
            G.add_node(node_name, shape="rectangle", color="red")
            G.add_edge("Income", node_name, weight=amount)
            expense_nodes.append(node_name)
        
        # Add savings node
        savings_contrib = self.user_data['savings']['monthly_contribution']
        savings_node = f"Savings\n${savings_contrib}/month"
        G.add_node(savings_node, shape="rectangle", color="blue")
        G.add_edge("Income", savings_node, weight=savings_contrib)
        
        # Add high-ticket purchases if any
        if self.user_data['high_ticket_purchases']:
            high_ticket_node = "High-Ticket\nPurchases"
            G.add_node(high_ticket_node, shape="ellipse", color="orange")
            
            for purchase in self.user_data['high_ticket_purchases']:
                node_name = f"{purchase['item']}\n${purchase['amount']}"
                G.add_node(node_name, shape="ellipse", color="orange")
                G.add_edge(high_ticket_node, node_name)
            
            # Connect to income to show impact
            G.add_edge("Income", high_ticket_node, style="dashed")
        
        # Add recommendation nodes
        if self.recommendations:
            rec_node = "Recommendations"
            G.add_node(rec_node, shape="hexagon", color="purple")
            
            for i, rec in enumerate(self.recommendations):
                node_name = f"Rec {i+1}: {rec['title']}"
                G.add_node(node_name, shape="hexagon", color="purple")
                G.add_edge(rec_node, node_name)
        
        # Create plot
        plt.figure(figsize=(12, 10))
        pos = nx.spring_layout(G, seed=42)
        
        # Draw nodes with different colors based on type
        node_colors = []
        for node in G.nodes():
            if "Income" in node:
                node_colors.append("lightgreen")
            elif any(expense in node for expense in self.user_data['expenses']):
                node_colors.append("lightcoral")
            elif "Savings" in node:
                node_colors.append("lightblue")
            elif "High-Ticket" in node or any(purchase['item'] in node for purchase in self.user_data['high_ticket_purchases']):
                node_colors.append("orange")
            elif "Rec" in node or node == "Recommendations":
                node_colors.append("mediumpurple")
            else:
                node_colors.append("gray")
        
        nx.draw_networkx(G, pos, with_labels=True, node_color=node_colors, 
                         node_size=2000, font_size=10, font_weight="bold",
                         arrows=True, arrowsize=15)
        
        plt.title("Financial Flowchart", fontsize=16, fontweight="bold")
        plt.axis('off')
        plt.tight_layout()
        plt.savefig(output_file, dpi=300, bbox_inches="tight")
        plt.close()
        
        print(f"\nFlowchart saved as {output_file}")
        return output_file

    def generate_report(self):
        """Generate a textual report of the financial analysis and recommendations"""
        print("\n===== FINANCIAL ANALYSIS REPORT =====\n")
        
        # Print income and expense summary
        monthly_income = self.user_data['income']['monthly']
        total_expenses = self.financial_metrics['total_expenses']
        print(f"Monthly Income: ${monthly_income:.2f}")
        print(f"Total Monthly Expenses: ${total_expenses:.2f}")
        print(f"Discretionary Income: ${self.financial_metrics['discretionary_income']:.2f}")
        
        # Print expense breakdown
        print("\nEXPENSE BREAKDOWN:")
        for category, amount in self.user_data['expenses'].items():
            percentage = (amount / total_expenses) * 100 if total_expenses > 0 else 0
            print(f"  {category}: ${amount:.2f} ({percentage:.1f}%)")
        
        # Print savings information
        print("\nSAVINGS INFORMATION:")
        current_savings = self.user_data['savings']['current']
        monthly_contribution = self.user_data['savings']['monthly_contribution']
        savings_rate = self.financial_metrics['savings_rate'] * 100
        print(f"  Current Savings: ${current_savings:.2f}")
        print(f"  Monthly Contribution: ${monthly_contribution:.2f}")
        print(f"  Savings Rate: {savings_rate:.1f}% of income")
        
        # Print debt information
        print("\nDEBT INFORMATION:")
        total_debt = self.financial_metrics['total_debt']
        debt_to_income = self.financial_metrics['debt_to_income'] * 100
        print(f"  Total Debt: ${total_debt:.2f}")
        print(f"  Debt-to-Income Ratio: {debt_to_income:.1f}%")
        
        # Print high-ticket purchases
        if self.user_data['high_ticket_purchases']:
            print("\nHIGH-TICKET PURCHASES:")
            for purchase in self.user_data['high_ticket_purchases']:
                print(f"  {purchase['item']}: ${purchase['amount']:.2f} on {purchase['date'].strftime('%m/%d/%Y')} (Category: {purchase['category']})")
        
        # Print recommendations
        if self.recommendations:
            print("\nFINANCIAL RECOMMENDATIONS:")
            for i, rec in enumerate(self.recommendations):
                print(f"\n{i+1}. {rec['title']} ({rec['category']})")
                print(f"   {rec['description']}")

    def _get_numeric_input(self, prompt):
        """Helper method to get valid numeric input from user"""
        while True:
            try:
                value = float(input(prompt))
                if value < 0:
                    print("Please enter a non-negative value.")
                    continue
                return value
            except ValueError:
                print("Please enter a valid number.")

def main():
    print("=" * 50)
    print("FINANCIAL FLOWCHART GENERATOR")
    print("=" * 50)
    print("This program will help you analyze your financial situation and generate\n"
          "a flowchart with personalized recommendations for better money management.")
    
    # Create an instance of the flowchart generator
    generator = FinancialFlowchartGenerator()
    
    # Choose data input method
    print("\nHow would you like to input your financial data?")
    print("1. Enter data manually")
    print("2. Import from CSV file")
    
    choice = input("Enter your choice (1 or 2): ")
    
    if choice == "1":
        generator.collect_user_data()
    elif choice == "2":
        csv_path = input("Enter the path to your CSV file: ")
        if os.path.exists(csv_path):
            generator.import_from_csv(csv_path)
        else:
            print("File not found. Falling back to manual input.")
            generator.collect_user_data()
    else:
        print("Invalid choice. Falling back to manual input.")
        generator.collect_user_data()
    
    # Analyze the financial data
    generator.analyze_data()
    
    # Generate recommendations
    generator.generate_recommendations()
    
    # Generate textual report
    generator.generate_report()
    
    # Generate and save flowchart
    flowchart_file = generator.generate_flowchart()
    
    print("\nThank you for using the Financial Flowchart Generator!")
    print(f"Your financial flowchart has been saved as '{flowchart_file}'.")
    print("Use this visualization along with the recommendations to improve your financial literacy and money management skills.")

if __name__ == "__main__":
    main()
    