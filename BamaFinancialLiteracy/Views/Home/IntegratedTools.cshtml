@{
    ViewData["Title"] = "Spending Analysis Tools";
}

<div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <a href="@Url.Action("Analyze")" class="btn btn-outline-crimson">
            <i class="fas fa-arrow-left me-2"></i> Back to Analysis
        </a>
        <div class="d-flex justify-content-center align-items-center">
            <img src="/images/bama-logo.png" alt="Alabama Logo" width="60" class="me-3">
            <h1 class="display-4 mb-0">Spending AI Tools</h1>
        </div>
        <div style="width: 120px;"></div> <!-- Spacer for balance -->
    </div>

    @if (TempData["Message"] != null)
    {
        <div class="alert alert-success">@TempData["Message"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    <!-- User Registration Section -->
    <div class="card shadow mb-4">
        <div class="card-header bg-crimson text-white">
            <h3 class="mb-0"><i class="fas fa-user-plus me-2"></i>User Registration</h3>
        </div>
        <div class="card-body">
            <form id="register-form" class="row g-3">
                <div class="col-md-6">
                    <label for="username" class="form-label">Username</label>
                    <input type="text" class="form-control" id="username" required>
                </div>
                <div class="col-md-6">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" class="form-control" id="password" required>
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-crimson">Register User</button>
                </div>
            </form>
            <div id="register-response" class="mt-3"></div>
        </div>
    </div>

    <!-- Add Transaction Section -->
    <div class="card shadow mb-4">
        <div class="card-header bg-crimson text-white">
            <h3 class="mb-0"><i class="fas fa-file-invoice-dollar me-2"></i>Add Transaction</h3>
        </div>
        <div class="card-body">
            <form id="transaction-form" class="row g-3">
                <div class="col-md-4">
                    <label for="user_id" class="form-label">User ID</label>
                    <input type="number" class="form-control" id="user_id" value="1" min="1" required>
                </div>
                <div class="col-md-4">
                    <label for="amount" class="form-label">Amount ($)</label>
                    <input type="number" class="form-control" id="amount" min="0.01" step="0.01" required>
                </div>
                <div class="col-md-4">
                    <label for="category" class="form-label">Category</label>
                    <select class="form-select" id="category" required>
                        <option value="groceries">Groceries</option>
                        <option value="transport">Transport</option>
                        <option value="utilities">Utilities</option>
                        <option value="entertainment">Entertainment</option>
                        <option value="dining">Dining</option>
                        <option value="shopping">Shopping</option>
                        <option value="subscription">Subscription</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-crimson">Add Transaction</button>
                </div>
            </form>
            
            <h3 class="mt-4">Transaction Response:</h3>
            <div id="transaction-response-container">
                <div id="transaction-response-status" class="text-center text-muted fst-italic">Waiting for transaction...</div>
                <div id="transaction-details" class="border rounded mb-3 d-none">
                    <div class="p-3 bg-light border-bottom d-flex align-items-center">
                        <span id="transaction-icon" class="fs-4 me-2">💰</span>
                        <span id="transaction-title" class="flex-grow-1 fw-bold">Transaction Details</span>
                        <span id="transaction-status-badge" class="badge bg-secondary">Pending</span>
                    </div>
                    <div class="p-3">
                        <div class="row mb-2">
                            <div class="col-md-4 text-muted">Transaction ID:</div>
                            <div id="detail-transaction-id" class="col-md-8">-</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-4 text-muted">Amount:</div>
                            <div id="detail-amount" class="col-md-8">-</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-4 text-muted">Category:</div>
                            <div id="detail-category" class="col-md-8">-</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-4 text-muted">Date:</div>
                            <div id="detail-date" class="col-md-8">-</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-4 text-muted">Flagged:</div>
                            <div id="detail-flagged" class="col-md-8">-</div>
                        </div>
                    </div>
                    <div id="analysis-section" class="border-top p-3 d-none">
                        <h4 class="fs-5">AI Analysis</h4>
                        <div class="ps-2">
                            <p id="analysis-advice"></p>
                            <div class="mb-2">
                                <span class="text-muted me-2">Tags:</span>
                                <div id="analysis-tags" class="d-inline-flex flex-wrap gap-1"></div>
                            </div>
                            <p id="analysis-impact"></p>
                        </div>
                    </div>
                    <div id="warnings-section" class="border-top p-3 d-none">
                        <h4 class="fs-5">Warnings</h4>
                        <div id="warnings-content"></div>
                    </div>
                </div>
                <pre id="transaction-response" class="d-none">Response will appear here...</pre>
                <button id="toggle-raw-json" class="btn btn-outline-secondary btn-sm d-none">Show Raw JSON</button>
            </div>
        </div>
    </div>

    <!-- Transaction History Section -->
    <div class="card shadow">
        <div class="card-header bg-crimson text-white">
            <h3 class="mb-0"><i class="fas fa-history me-2"></i>Transaction History</h3>
        </div>
        <div class="card-body">
            <div class="row g-3 mb-4">
                <div class="col-md">
                    <label for="history-user-id" class="form-label">User ID</label>
                    <input type="number" id="history-user-id" class="form-control" value="1" min="1">
                </div>
                <div class="col-md">
                    <label for="history-category" class="form-label">Category</label>
                    <select id="history-category" class="form-select">
                        <option value="">All Categories</option>
                        <option value="groceries">Groceries</option>
                        <option value="transport">Transport</option>
                        <option value="utilities">Utilities</option>
                        <option value="entertainment">Entertainment</option>
                        <option value="dining">Dining</option>
                        <option value="shopping">Shopping</option>
                        <option value="subscription">Subscription</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="col-md">
                    <label for="history-days" class="form-label">Time Period</label>
                    <select id="history-days" class="form-select">
                        <option value="">All Time</option>
                        <option value="7">Last 7 Days</option>
                        <option value="30">Last 30 Days</option>
                        <option value="90">Last 90 Days</option>
                        <option value="365">Last Year</option>
                    </select>
                </div>
                <div class="col-md">
                    <label for="history-flagged" class="form-label">Purchase Type</label>
                    <select id="history-flagged" class="form-select">
                        <option value="">All Purchases</option>
                        <option value="true">Impulsive Only</option>
                        <option value="false">Non-Impulsive Only</option>
                    </select>
                </div>
                <div class="col-md">
                    <label for="history-limit" class="form-label">Limit</label>
                    <select id="history-limit" class="form-select">
                        <option value="10">10 Transactions</option>
                        <option value="25">25 Transactions</option>
                        <option value="50" selected>50 Transactions</option>
                        <option value="100">100 Transactions</option>
                    </select>
                </div>
                <div class="col-md-12">
                    <button id="load-transactions" class="btn btn-crimson">
                        <i class="fas fa-sync-alt me-1"></i> Load Transactions
                    </button>
                </div>
            </div>
            
            <div id="transaction-summary" class="d-none mb-4">
                <div class="row row-cols-1 row-cols-md-4 g-3 mb-3">
                    <div class="col">
                        <div class="card h-100 bg-light">
                            <div class="card-body text-center">
                                <div class="text-muted small">Total Transactions</div>
                                <div id="summary-count" class="display-6 fw-bold">0</div>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="card h-100 bg-light">
                            <div class="card-body text-center">
                                <div class="text-muted small">Total Spent</div>
                                <div id="summary-amount" class="display-6 fw-bold">$0.00</div>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="card h-100 bg-light">
                            <div class="card-body text-center">
                                <div class="text-muted small">Most Common Category</div>
                                <div id="summary-top-category" class="display-6 fw-bold">-</div>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="card h-100 bg-light">
                            <div class="card-body text-center">
                                <div class="text-muted small">Impulsive Purchases</div>
                                <div id="summary-impulsive" class="display-6 fw-bold">0</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="category-breakdown" class="d-flex flex-wrap gap-2">
                    <!-- Category breakdown will be populated by JavaScript -->
                </div>
            </div>
            
            <div id="transaction-history-container">
                <div id="transaction-history-status" class="text-center text-muted fst-italic">
                    Click "Load Transactions" to view your transaction history
                </div>
                <div id="transaction-table-container" class="d-none">
                    <div class="table-responsive">
                        <table id="transaction-table" class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Category</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="transaction-table-body">
                                <!-- Transaction rows will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    <div id="no-transactions" class="text-center text-muted fst-italic py-4 d-none">
                        No transactions found matching your criteria.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Form submission handling for registration
        const registerForm = document.getElementById('register-form');
        const registerResponseArea = document.getElementById('register-response');
        
        registerForm.addEventListener('submit', async function(event) {
            event.preventDefault();
    
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    
    registerResponseArea.textContent = 'Processing...';
    
    try {
        // MODIFY THIS: Create a dummy response since the endpoint doesn't exist yet
        const response = await fetch('/api/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password })
        });
        
        const result = await response.json();
        
        // Simulated response
        const result = {
            success: true,
            message: "User registered successfully (simulated)",
            user_id: 1
        };
        
        registerResponseArea.textContent = JSON.stringify(result, null, 2);
        registerResponseArea.classList.remove('text-danger');
    } catch (error) {
        registerResponseArea.textContent = `Note: The API endpoint is not available. This is a demo interface.`;
        registerResponseArea.classList.add('text-info');
        registerResponseArea.classList.remove('text-danger');
    }

});
        
      // Form submission handling for transactions
const transactionForm = document.getElementById('transaction-form');
const transactionResponseArea = document.getElementById('transaction-response');

transactionForm.addEventListener('submit', async function(event) {
    event.preventDefault();
    
    const userId = document.getElementById('user_id').value;
    const amount = document.getElementById('amount').value;
    const category = document.getElementById('category').value;
    
    // Reset transaction response display
    const statusContainer = document.getElementById('transaction-response-status');
    const detailsContainer = document.getElementById('transaction-details');
    const rawJsonToggle = document.getElementById('toggle-raw-json');
    
    statusContainer.textContent = 'Processing transaction...';
    statusContainer.classList.remove('d-none');
    detailsContainer.classList.add('d-none');
    rawJsonToggle.classList.add('d-none');
    transactionResponseArea.classList.add('d-none');
    
    try {
        // Simulated response instead of actual API call
        /*
        const response = await fetch('/api/add_transaction', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: userId,
                amount: amount,
                category: category,
                user_input: true
            })
        });
        
        const result = await response.json();
        */
        
        // Create simulated transaction data
        const txDate = new Date();
        const isImpulsive = category === 'entertainment' || category === 'shopping' || 
                           (parseFloat(amount) > 100);
        
        const result = {
            success: true,
            message: "Transaction added successfully (simulated)",
            data: {
                transaction_id: Math.floor(Math.random() * 1000) + 1,
                user_id: parseInt(userId),
                amount: parseFloat(amount).toFixed(2),
                category: category,
                timestamp: txDate.toISOString(),
                flagged: isImpulsive,
                analysis: {
                    advice: isImpulsive ? 
                        `This ${category} purchase of $${amount} appears to be impulsive. Consider setting a budget for ${category} expenses.` : 
                        `This ${category} purchase of $${amount} appears to be a planned expense. Good job managing your finances!`,
                    impact: isImpulsive ? 
                        "Impulsive purchases can reduce your savings rate by 15-20% over time." : 
                        "Planned purchases help you maintain financial stability and reach your goals.",
                    tags: isImpulsive ? 
                        ["impulsive", category, "review"] : 
                        ["planned", category, "budgeted"]
                }
            }
        };
        
        transactionResponseArea.textContent = JSON.stringify(result, null, 2);
        
        // Hide the status message and show details
        statusContainer.classList.add('d-none');
        detailsContainer.classList.remove('d-none');
        rawJsonToggle.classList.remove('d-none');
        
        // Update transaction status badge
        const statusBadge = document.getElementById('transaction-status-badge');
        statusBadge.textContent = 'Success';
        statusBadge.classList.remove('bg-secondary');
        statusBadge.classList.add('bg-success');
        
        // Update transaction details
        const data = result.data;
        document.getElementById('detail-transaction-id').textContent = data.transaction_id;
        document.getElementById('detail-amount').textContent = `$${parseFloat(data.amount).toFixed(2)}`;
        document.getElementById('detail-amount').classList.add('text-primary', 'fw-bold');
        document.getElementById('detail-category').textContent = 
            data.category.charAt(0).toUpperCase() + data.category.slice(1);
        
        // Format date nicely
        document.getElementById('detail-date').textContent = txDate.toLocaleString();
        
        // Show flagged status with icon
        const flaggedEl = document.getElementById('detail-flagged');
        flaggedEl.textContent = data.flagged ? '⚠️ Yes (Potentially impulsive)' : '✅ No';
        if (data.flagged) flaggedEl.classList.add('text-warning');
        
        // Handle AI analysis if present
        const analysisSection = document.getElementById('analysis-section');
        if (data.analysis) {
            analysisSection.classList.remove('d-none');
            document.getElementById('analysis-advice').textContent = data.analysis.advice;
            document.getElementById('analysis-impact').textContent = data.analysis.impact;
            
            // Create tags
            const tagsContainer = document.getElementById('analysis-tags');
            tagsContainer.innerHTML = '';
            if (data.analysis.tags && data.analysis.tags.length > 0) {
                data.analysis.tags.forEach(tag => {
                    const tagEl = document.createElement('span');
                    tagEl.textContent = tag;
                    tagEl.classList.add('badge', 'bg-info', 'text-dark');
                    
                    // Add special classes for certain tags
                    if (['essential', 'necessary', 'needed', 'planned', 'budgeted'].includes(tag.toLowerCase())) {
                        tagEl.classList.remove('bg-info');
                        tagEl.classList.add('bg-success', 'text-white');
                    }
                    if (['impulsive', 'unplanned', 'warning', 'review'].includes(tag.toLowerCase())) {
                        tagEl.classList.remove('bg-info');
                        tagEl.classList.add('bg-warning', 'text-dark');
                    }
                    tagsContainer.appendChild(tagEl);
                });
            }
        } else {
            analysisSection.classList.add('d-none');
        }
    } catch (error) {
        statusContainer.textContent = `Note: The API endpoint is not available. This is a demo interface.`;
        statusContainer.classList.remove('text-danger');
        statusContainer.classList.add('text-info');
    }   
    });
        
       // Transaction History functionality
const loadTransactionsButton = document.getElementById('load-transactions');
const historyUserIdInput = document.getElementById('history-user-id');
const historyCategorySelect = document.getElementById('history-category');
const historyDaysSelect = document.getElementById('history-days');
const historyFlaggedSelect = document.getElementById('history-flagged');
const historyLimitSelect = document.getElementById('history-limit');
const transactionHistoryStatus = document.getElementById('transaction-history-status');
const transactionTableContainer = document.getElementById('transaction-table-container');
const transactionTableBody = document.getElementById('transaction-table-body');
const noTransactionsDiv = document.getElementById('no-transactions');
const transactionSummary = document.getElementById('transaction-summary');

// Category colors for visualization
const categoryColors = {
    'groceries': 'success',
    'transport': 'primary',
    'utilities': 'info',
    'entertainment': 'danger',
    'dining': 'warning',
    'shopping': 'secondary',
    'subscription': 'info',
    'other': 'light'
};

loadTransactionsButton.addEventListener('click', async function(event) {
    event.preventDefault();
    const userId = historyUserIdInput.value;
    const category = historyCategorySelect.value;
    const days = historyDaysSelect.value;
    const flagged = historyFlaggedSelect.value;
    const limit = historyLimitSelect.value;
    
    if (!userId) {
        alert('Please enter a User ID');
        return;
    }
    
    // Show loading status
    transactionHistoryStatus.textContent = 'Loading transactions...';
    transactionHistoryStatus.classList.remove('d-none');
    transactionTableContainer.classList.add('d-none');
    transactionSummary.classList.add('d-none');
    
    try {
        // Simulate API call instead of making actual request
        /*
        // Build the query parameters
        let queryParams = new URLSearchParams();
        if (category) queryParams.append('category', category);
        if (days) queryParams.append('days', days);
        if (flagged) queryParams.append('flagged', flagged);
        if (limit) queryParams.append('limit', limit);
        
        // Make the API request
        const response = await fetch(`/api/transactions/${userId}?${queryParams.toString()}`);
        const result = await response.json();
        */
        
        // Generate simulated transaction data
        const numTransactions = parseInt(limit) || 10;
        const transactions = [];
        const categories = ['groceries', 'transport', 'utilities', 'entertainment', 'dining', 'shopping', 'subscription', 'other'];
        const categoryStats = {};
        
        categories.forEach(cat => {
            categoryStats[cat] = { count: 0, total: 0 };
        });
        
        let totalAmount = 0;
        let impulsiveCount = 0;
        
        // Create random transactions
        for (let i = 0; i < numTransactions; i++) {
            // Apply filters
            let txCategory = category || categories[Math.floor(Math.random() * categories.length)];
            
            // Random amount between $5 and $200
            const amount = Math.random() * 195 + 5;
            
            // Determine if transaction is impulsive based on category and amount
            const isImpulsive = 
                (txCategory === 'entertainment' || txCategory === 'shopping' || txCategory === 'dining') && 
                (amount > 50 || Math.random() > 0.7);
            
            // Apply flagged filter if specified
            if (flagged === 'true' && !isImpulsive) continue;
            if (flagged === 'false' && isImpulsive) continue;
            
            // Create transaction date
            const now = new Date();
            const daysAgo = Math.floor(Math.random() * (days ? parseInt(days) : 90));
            const txDate = new Date(now);
            txDate.setDate(txDate.getDate() - daysAgo);
            
            // Apply days filter
            if (days && daysAgo > parseInt(days)) continue;
            
            // Create transaction
            const transaction = {
                transaction_id: i + 1,
                user_id: parseInt(userId),
                amount: amount.toFixed(2),
                category: txCategory,
                timestamp: txDate.toISOString(),
                flagged: isImpulsive
            };
            
            transactions.push(transaction);
            
            // Update statistics
            totalAmount += parseFloat(amount);
            if (isImpulsive) impulsiveCount++;
            
            categoryStats[txCategory].count++;
            categoryStats[txCategory].total += parseFloat(amount);
        }
        
        // Sort by date (newest first)
        transactions.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
        
        // Limit to requested number
        const limitedTransactions = transactions.slice(0, parseInt(limit));
        
        // Create result object
        const result = {
            success: true,
            data: {
                transactions: limitedTransactions,
                stats: {
                    total_count: limitedTransactions.length,
                    total_amount: totalAmount.toFixed(2),
                    categories: categoryStats
                }
            }
        };
        
        // Hide status message
        transactionHistoryStatus.classList.add('d-none');
        
        // Process the data
        const resultTransactions = result.data.transactions;
        const stats = result.data.stats;
        
        if (!resultTransactions || resultTransactions.length === 0) {
            // Show no transactions message
            transactionTableContainer.classList.remove('d-none');
            noTransactionsDiv.classList.remove('d-none');
            return;
        }
        
        // Show the table and hide no transactions message
        transactionTableContainer.classList.remove('d-none');
        noTransactionsDiv.classList.add('d-none');
        
        // Update the summary section
        updateTransactionSummary(stats, resultTransactions);
        
        // Clear existing table rows
        transactionTableBody.innerHTML = '';
        
        // Add transaction rows
        resultTransactions.forEach(transaction => {
            const row = document.createElement('tr');
            
            // Format date
            const txDate = new Date(transaction.timestamp);
            const formattedDate = txDate.toLocaleString();
            
            // Create cells
            row.innerHTML = `
                <td>${formattedDate}</td>
                <td>
                    <span class="badge bg-${categoryColors[transaction.category] || 'secondary'}">
                        ${transaction.category.charAt(0).toUpperCase() + transaction.category.slice(1)}
                    </span>
                </td>
                <td class="fw-bold">$${parseFloat(transaction.amount).toFixed(2)}</td>
                <td>
                    ${transaction.flagged 
                        ? '<span class="badge bg-warning text-dark"><i class="fas fa-exclamation-triangle me-1"></i> Impulsive</span>' 
                        : '<span class="badge bg-success"><i class="fas fa-check me-1"></i> Normal</span>'}
                </td>
                <td>
                    <button class="btn btn-sm btn-outline-primary" onclick="viewTransactionDetails(${transaction.transaction_id})">
                        <i class="fas fa-eye me-1"></i> View
                    </button>
                </td>
            `;
            
            transactionTableBody.appendChild(row);
        });
        
    } catch (error) {
        transactionHistoryStatus.textContent = `Note: The API endpoint is not available. This is a demo interface.`;
        transactionHistoryStatus.classList.remove('text-danger');
        transactionHistoryStatus.classList.add('text-info');
    }
});

</script>
}
